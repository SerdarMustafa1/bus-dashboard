{"version":3,"sources":["pages/newPassword.jsx"],"names":["RecoveryForm","translate","t","doSubmit","pass1","doPassword1Change","pass2","doPassword2Change","onSubmit","className","Group","Label","Control","type","pattern","placeholder","value","onChange","required","variant","Information","Fragment","to","InvalidToken","NewPassword","state","password1","password2","token","tokenError","success","controller","AbortController","handleSubmit","evt","a","preventDefault","query","queryRequest","signal","resetPassword","props","Swal","fire","icon","title","showConfirmButton","timer","setState","text","console","log","validateToken","recoveryValidate","handlePassword1Change","target","handlePassword2Change","this","match","params","abort","Body","Component"],"mappings":"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","file":"static/js/4.c8b04d64.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport queryRequest from '../utils/queryRequest';\nimport { Link } from 'react-router-dom';\nimport Swal from 'sweetalert2';\n\nimport { translate } from 'react-i18next';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nconst RecoveryForm = translate()(\n  ({ t, doSubmit, pass1, doPassword1Change, pass2, doPassword2Change }) => (\n    <Form onSubmit={doSubmit}>\n      <h4 className=\"mt-0 header-title\">{t('reset.title')}</h4>\n      <Form.Group>\n        <Form.Label>{t('reset.form.password1.label')}</Form.Label>\n        <Form.Control\n          type=\"password\"\n          pattern=\".{6,}\"\n          placeholder={t('reset.form.password1.placeholder')}\n          value={pass1}\n          onChange={doPassword1Change}\n          required\n        />\n      </Form.Group>\n      <Form.Group>\n        <Form.Label>{t('reset.form.password2.label')}</Form.Label>\n        <Form.Control\n          type=\"password\"\n          pattern=\".{6,}\"\n          placeholder={t('reset.form.password2.placeholder')}\n          value={pass2}\n          onChange={doPassword2Change}\n          required\n        />\n      </Form.Group>\n      <Button\n        variant=\"primary\"\n        className=\"w-md waves-effect waves-light\"\n        type=\"submit\"\n      >\n        {t('reset.form.button.submit')}\n      </Button>\n    </Form>\n  )\n);\n\nconst Information = translate()(({ t }) => (\n  <React.Fragment>\n    <h4 className=\"mt-0 header-title\">{t('reset.submit.title')}</h4>\n    <p className=\"mb-10\">{t('reset.submit.description')}</p>\n    <Link className=\"btn btn-primary w-md waves-effect waves-light\" to=\"/login\">\n      {t('reset.submit.button.redirect.login')}\n    </Link>\n  </React.Fragment>\n));\n\nconst InvalidToken = translate()(({ t }) => (\n  <React.Fragment>\n    <h4 className=\"mt-0 header-title\">{t('reset.invalid.title')}</h4>\n    <p className=\"mb-10\">{t('reset.invalid.description')}</p>\n    <Link\n      className=\"btn btn-primary w-md waves-effect waves-light\"\n      to=\"/reset_password\"\n    >\n      {t('reset.invalid.button.redirect.reset')}\n    </Link>\n  </React.Fragment>\n));\n\nclass NewPassword extends Component {\n  state = {\n    password1: '',\n    password2: '',\n    token: '',\n    tokenError: false,\n    success: false,\n  };\n\n  controller = new AbortController();\n  componentDidMount() {\n    this.validateToken(this.props.match.params.token);\n  }\n  componentWillUnmount() {\n    this.controller.abort();\n  }\n\n  handleSubmit = async (evt) => {\n    evt.preventDefault();\n    if (!this.state.token) return;\n    if (!this.state.password1) return;\n    if (!this.state.password2) return;\n    if (this.state.password1 !== this.state.password2) return;\n\n    const query = `mutation{resetPassword(token:\"${this.state.token}\", password:\"${this.state.password1}\")}`;\n    try {\n      const { resetPassword } = await queryRequest(\n        query,\n        this.controller.signal\n      );\n      const { t } = this.props;\n      if (!resetPassword) {\n        Swal.fire({\n          icon: 'error',\n          title: t('reset.form.invalid.title'),\n          text: t('reset.form.invalid.text'),\n          showConfirmButton: false,\n          timer: 1500,\n        });\n      } else {\n        Swal.fire({\n          icon: 'success',\n          title: t('reset.form.success.title'),\n          showConfirmButton: false,\n          timer: 1500,\n        });\n        this.setState({ success: true });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  validateToken = async (token) => {\n    const query = `query{recoveryValidate(token:\"${token}\")}`;\n    try {\n      const { recoveryValidate } = await queryRequest(\n        query,\n        this.controller.signal\n      );\n      if (!recoveryValidate) this.setState({ tokenError: true });\n      else this.setState({ token: recoveryValidate });\n    } catch (err) {\n      this.setState({ tokenError: true });\n      console.log(err);\n    }\n  };\n\n  handlePassword1Change = (evt) =>\n    this.setState({ password1: evt.target.value });\n  handlePassword2Change = (evt) =>\n    this.setState({ password2: evt.target.value });\n\n  render() {\n    if (!this.state.token && !this.state.tokenError) return null;\n    return (\n      <div className=\"wrapper-page\">\n        <Card>\n          <Card.Body>\n            <div className=\"p-2\">\n              {this.state.tokenError && <InvalidToken />}\n              {!this.state.tokenError && !this.state.success && (\n                <RecoveryForm\n                  doPassword1Change={this.handlePassword1Change}\n                  doPassword2Change={this.handlePassword2Change}\n                  doSubmit={this.handleSubmit}\n                  pass1={this.state.password1}\n                  pass2={this.state.password2}\n                />\n              )}\n              {!this.state.tokenError && this.state.success && <Information />}\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\nexport default translate()(NewPassword);\n"],"sourceRoot":""}